from aiogram import types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.utils import executor
from aiogram.dispatcher.filters import Command
from logger import logger, log_moderation, log_violation, log_ban
from database import db
from api_client import OpenRouterClient
from api_reconnector import APIReconnector
from moderator import Moderator
from utils import (is_valid_api_key, format_error_message, format_moderation_message, 
                  is_admin, safe_reply)
from datetime import datetime, timedelta
from cache import Cache
from hints import hint_system  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥—Å–∫–∞–∑–æ–∫
from states import FeedbackStates
from validators import validator, format_markdown_message  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
from exceptions import ApiError, ValidationError, RateLimitError  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–π
from formatting import (
    format_message, format_code, format_error,
    format_section, format_list, safe_format_message
)



# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ —Å —Ç–µ–∫—Å—Ç–æ–º –ø–æ–º–æ—â–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
ADMIN_HELP_TEXT = """
üîë *–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*

üìä *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:*
‚Ä¢ /admin_users \\- –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞
‚Ä¢ /admin_logs \[user_id\] \[days\] \\- –õ–æ–≥–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è

üìù *–ú–æ–¥–µ—Ä–∞—Ü–∏—è:*
‚Ä¢ /view_feedback \\- –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∑—ã–≤–æ–≤
"""

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ —Å –æ–±—â–∏–º —Ç–µ–∫—Å—Ç–æ–º –ø–æ–º–æ—â–∏
HELP_TEXT = """
ü§ñ *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

‚Ä¢ /start \\- –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
‚Ä¢ /help \\- –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ /reset \\- –°–±—Ä–æ—Å–∏—Ç—å API\\-–∫–ª—é—á
‚Ä¢ /restart \\- –°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
‚Ä¢ /rules \\- –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞
‚Ä¢ /examples \\- –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤
‚Ä¢ /feedback \\- –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤

üìù *–ö–∞–∫ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã:*
‚Ä¢ –ü–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å —á–µ—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ
‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–±–ª–µ–º—ã
‚Ä¢ –ü—Ä–∏–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ –∫–æ–¥, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

‚ö†Ô∏è *–°–∏—Å—Ç–µ–º–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π:*
‚Ä¢ 1\\-–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ: –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
‚Ä¢ 2\\-–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ: –ë–∞–Ω –Ω–∞ 5 –º–∏–Ω—É—Ç
‚Ä¢ 3\\-–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ: –ë–∞–Ω –Ω–∞ 10 –º–∏–Ω—É—Ç
‚Ä¢ 4\\-–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ: –ë–∞–Ω –Ω–∞ 30 –º–∏–Ω—É—Ç
‚Ä¢ 5\\-–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ: –ë–∞–Ω –Ω–∞ 60 –º–∏–Ω—É—Ç

‚ÑπÔ∏è –ù–∞—Ä—É—à–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
"""

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
moderator = Moderator()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—ç—à–∞
cache = Cache(max_size=1000, ttl=3600)  # 1000 –∑–∞–ø–∏—Å–µ–π, TTL 1 —á–∞—Å

# –ó–¥–µ—Å—å –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥

async def cmd_start(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    """
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è API-–∫–ª—é—á
    user_data = db.get_user(user_id)
    
    if user_data and user_data[0]:  # api_key is first in tuple
        # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å API-–∫–ª—é—á
        await message.reply(
            "üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Ç–µ–±–µ –≤ –æ–±—É—á–µ–Ω–∏–∏.\n\n"
            "ü§î –ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ–±—ä—è—Å–Ω–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª.\n\n"
            "üìö –ü–æ–º–Ω–∏, —á—Ç–æ —è –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ *–ø–æ–Ω—è—Ç—å* –º–∞—Ç–µ—Ä–∏–∞–ª, "
            "–∞ –Ω–µ —Å–¥–µ–ª–∞—Ç—å —Ä–∞–±–æ—Ç—É –∑–∞ —Ç–µ–±—è.\n\n"
            "‚ùì –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º, –∏—Å–ø–æ–ª—å–∑—É–π /help",
            parse_mode=types.ParseMode.MARKDOWN
        )
    else:
        # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç API-–∫–ª—é—á–∞
        await message.reply(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—É—á–∏—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤ –æ–±—É—á–µ–Ω–∏–∏.\n\n"
            "üîë –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –º–Ω–µ –Ω—É–∂–µ–Ω —Ç–≤–æ–π API-–∫–ª—é—á –æ—Ç OpenRouter.\n"
            "–ï–≥–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞ —Å–∞–π—Ç–µ: https://openrouter.ai/keys\n\n"
            "‚úâÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –∫–ª—é—á.",
            parse_mode=types.ParseMode.MARKDOWN
        )

async def cmd_help(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
    """
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    try:
        help_text = HELP_TEXT
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        if is_admin(user_id):
            admin_section = "\n\nüîë *–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:*\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin\_help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
            help_text += admin_section
        
        await message.reply(help_text, parse_mode=types.ParseMode.MARKDOWN_V2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø—Ä–∞–≤–∫–∏: {str(e)}")
        await safe_reply(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def cmd_reset(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset
    """
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /reset –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    if db.delete_user(user_id):
        logger.info(f"API-–∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª–µ–Ω")
        await message.reply(
            "–¢–≤–æ–π API-–∫–ª—é—á –±—ã–ª —É–¥–∞–ª–µ–Ω. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–æ–≤—ã–π –∫–ª—é—á –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã."
        )
    else:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ API-–∫–ª—é—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def process_api_key(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ API-–∫–ª—é—á–∞
    """
    user_id = message.from_user.id
    api_key = message.text.strip()
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω API-–∫–ª—é—á –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞
    if not is_valid_api_key(api_key):
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API-–∫–ª—é—á–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await message.reply(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API-–∫–ª—é—á–∞. "
            "–ö–ª—é—á –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'sk-'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞."
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á —á–µ—Ä–µ–∑ API
    try:
        client = APIReconnector(api_key)
        if await client.client.check_api_key():
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –≤ –±–∞–∑—É
            if db.add_user(user_id, api_key):
                logger.info(f"API-–∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
                await message.reply(
                    "API-–∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! "
                    "–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å—ã, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –Ω–∏–º–∏."
                )
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ API-–∫–ª—é—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–ª—é—á–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            logger.warning(f"–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π API-–∫–ª—é—á –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await message.reply(
                "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π API-–∫–ª—é—á. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API-–∫–ª—é—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.reply(format_error(str(e), "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–∑–∂–µ"))

async def process_message(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–æ–ø—Ä–æ—Å–æ–≤)
    """
    user_id = message.from_user.id
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    if message.text.startswith('/'):
        return
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '/', –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É API-–∫–ª—é—á–∞
    if is_admin(user_id) and message.text.startswith('/'):
        return
        
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {message.text[:100]}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    last_activity = db.get_last_activity(user_id)
    if last_activity:
        if hint_system.should_show_hint(user_id, last_activity):
            hint = hint_system.get_hint(user_id, 'inactive')
            if hint:
                await safe_reply(message, hint)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    db.update_last_activity(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è API-–∫–ª—é—á
    user_data = db.get_user(user_id)
    if not user_data or not user_data[0]:  # api_key is first in tuple
        await safe_reply(message,
            "üîë –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –º–Ω–µ –Ω—É–∂–µ–Ω —Ç–≤–æ–π API-–∫–ª—é—á –æ—Ç OpenRouter.\n"
            "–ï–≥–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞ —Å–∞–π—Ç–µ: https://openrouter.ai/keys\n\n"
            "‚úâÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –∫–ª—é—á."
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω
    is_banned, reason = db.is_banned(user_id)
    if is_banned:
        await safe_reply(message,
            f"‚õîÔ∏è *–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã*\n\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {reason}"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –ø–µ—Ä–µ–¥ –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –∫ API
    cached_response = cache.get(message.text)
    if cached_response:
        logger.info(f"–ù–∞–π–¥–µ–Ω –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        try:
            formatted_response = format_message(cached_response)
            await message.reply(formatted_response, parse_mode=types.ParseMode.MARKDOWN_V2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
            await safe_reply(message, cached_response)
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ API —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
        api_client = APIReconnector(user_data[0])  # api_key
        
        # –î–ª—è –∞–¥–º–∏–Ω–æ–≤ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–æ–¥–µ—Ä–∞—Ü–∏—é
        if is_admin(user_id):
            logger.info(f"–ê–¥–º–∏–Ω {user_id} –æ–±–æ—à–µ–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é: {message.text[:100]}")
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä
            is_violation, violation_reason = await moderator.moderate_message(message.text, api_client)
            
            if is_violation:
                # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏–µ
                log_violation(user_id, "content_policy", message.text, violation_reason)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏–µ –≤ –±–∞–∑—É
                success, violations_count = db.add_violation(user_id, "content_policy", violation_reason, message.text)
                if not success:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    await safe_reply(message,
                        "‚ö†Ô∏è *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è*\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    )
                    return
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π
                if violations_count == 1:
                    # –ü–µ—Ä–≤–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                    await safe_reply(message,
                        "‚ö†Ô∏è *–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ*\n\n"
                        f"–ü—Ä–∏—á–∏–Ω–∞: {violation_reason}\n\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞. "
                        "–°–ª–µ–¥—É—é—â–µ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ."
                    )
                else:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∞–Ω–∞
                    ban_duration = db.get_ban_duration(violations_count)
                    if ban_duration > 0:
                        if db.ban_user(user_id, violation_reason, minutes=ban_duration):
                            log_ban(user_id, f"–ù–∞—Ä—É—à–µ–Ω–∏–µ #{violations_count}: {violation_reason}")
                            await safe_reply(message,
                                f"üö´ *–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ {ban_duration} –º–∏–Ω—É—Ç*\n\n"
                                f"–ü—Ä–∏—á–∏–Ω–∞: {violation_reason}\n\n"
                                "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –≤–∞—Å –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞.\n"
                                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏."
                            )
                        else:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ –º–æ–¥–µ—Ä–∞—Ü–∏—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å - –∞–¥–º–∏–Ω
        await message.bot.send_chat_action(message.chat.id, types.ChatActions.TYPING)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç LearnLM
        response = await api_client.get_learnlm_response(message.text)
        
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞
            formatted_response = format_message(response)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await message.reply(formatted_response, parse_mode=types.ParseMode.MARKDOWN_V2)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            cache.set(message.text, response)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await safe_reply(message, response)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await safe_reply(message, format_error(str(e), "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–∑–∂–µ"))

async def cmd_admin_users(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin_users - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞
    """
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.reply("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    logger.info(f"–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {user_id}")
    
    try:
        conn = db._get_connection()
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        cursor.execute('''
            SELECT 
                u.user_id, 
                COUNT(v.id) as violations_count,
                u.is_banned,
                (SELECT MAX(violation_date) FROM violations WHERE user_id = u.user_id) as last_violation_date,
                u.last_activity
            FROM users u
            LEFT JOIN violations v ON u.user_id = v.user_id
            GROUP BY u.user_id
            ORDER BY u.last_activity DESC NULLS LAST
        ''')
        
        users = cursor.fetchall()
        
        if not users:
            await message.reply("üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
            return
            
        response = "üìä *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞:*\n\n"
        for user in users:
            user_id, violations, is_banned, last_violation, last_activity = user
            status = "üö´ –ó–∞–±–∞–Ω–µ–Ω" if is_banned else "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            last_active_str = "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
            if last_activity:
                try:
                    last_active = datetime.fromisoformat(last_activity)
                    last_active_str = last_active.strftime("%d.%m.%Y %H:%M")
                except (ValueError, TypeError):
                    last_active_str = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞"
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏—è
            last_violation_str = "–ù–µ—Ç –Ω–∞—Ä—É—à–µ–Ω–∏–π"
            if last_violation:
                try:
                    last_violation_date = datetime.fromisoformat(last_violation)
                    last_violation_str = last_violation_date.strftime("%d.%m.%Y %H:%M")
                except (ValueError, TypeError):
                    last_violation_str = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞"
            
            response += (f"üë§ *ID:* `{user_id}`\n"
                        f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_active_str}\n"
                        f"‚ö†Ô∏è –ù–∞—Ä—É—à–µ–Ω–∏–π: {violations}\n"
                        f"üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ: {last_violation_str}\n"
                        f"üìå –°—Ç–∞—Ç—É—Å: {status}\n\n")
            
        await message.reply(response, parse_mode=types.ParseMode.MARKDOWN)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    finally:
        cursor.close()
        conn.close()

async def cmd_admin_logs(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin_logs - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–æ–≥–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–æ—Ç–æ–º
    """
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.reply("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
    args = message.get_args().split()
    target_user_id = int(args[0]) if args and args[0].isdigit() else None
    days = int(args[1]) if len(args) > 1 and args[1].isdigit() else 7  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞ 7 –¥–Ω–µ–π
    
    logger.info(f"–ó–∞–ø—Ä–æ—Å –ª–æ–≥–æ–≤ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {user_id}" + 
               (f" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}" if target_user_id else ""))
    
    try:
        conn = db._get_connection()
        cursor = conn.cursor()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        query = '''
            SELECT v.user_id,
                   v.violation_date,
                   v.message_text,
                   v.violation_type,
                   v.violation_reason
            FROM violations v
            WHERE v.violation_date >= ?
        '''
        params = [(datetime.now() - timedelta(days=days)).isoformat()]
        
        if target_user_id:
            query += " AND v.user_id = ?"
            params.append(target_user_id)
            
        query += " ORDER BY v.violation_date DESC LIMIT 50"  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        
        cursor.execute(query, params)
        logs = cursor.fetchall()
        
        if not logs:
            await message.reply(
                "üìä *–õ–æ–≥–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º*\n\n"
                f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π "
                f"{('–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ' + str(target_user_id)) if target_user_id else ''}"
                " –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                parse_mode=types.ParseMode.MARKDOWN
            )
            return
            
        response = [f"üìä *–õ–æ–≥–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º*\n"
                   f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π "
                   f"{('–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ' + str(target_user_id)) if target_user_id else ''}\n\n"]
                  
        for log in logs:
            user_id, date, text, type_, reason = log
            date_str = datetime.fromisoformat(date).strftime("%d.%m.%Y %H:%M")
            
            log_entry = (f"üë§ *ID:* `{user_id}`\n"
                        f"üìÖ *–î–∞—Ç–∞:* {date_str}\n"
                        f"üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ:* `{text[:100]}`{'...' if len(text) > 100 else ''}\n"
                        f"üìå *–¢–∏–ø:* `{type_}`\n"
                        f"‚ùóÔ∏è *–ü—Ä–∏—á–∏–Ω–∞:* `{reason}`\n\n")
            
            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –æ—Ç–≤–µ—Ç —Å—Ç–∞–Ω–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π
            if len(response[-1] + log_entry) > 3500:
                response.append(log_entry)
            else:
                response[-1] += log_entry
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        for part in response:
            await message.reply(part, parse_mode=types.ParseMode.MARKDOWN)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤.")
    finally:
        cursor.close()
        conn.close()

async def cmd_admin_help(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin_help - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞–º
    """
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.reply(format_error("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."))
        return
        
    try:
        help_text = format_section(
            "üîë –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            format_section(
                "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:",
                format_list([
                    "/admin\\_users \\- –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞",
                    "/admin\\_logs \\[user\\_id\\] \\[days\\] \\- –õ–æ–≥–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è"
                ])
            ),
            format_section(
                "üìù –ú–æ–¥–µ—Ä–∞—Ü–∏—è:",
                format_list([
                    "/view\\_feedback \\- –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∑—ã–≤–æ–≤\\:",
                    "  ‚Ä¢ /view\\_feedback \\- –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã",
                    "  ‚Ä¢ /view\\_feedback all \\- –≤—Å–µ –æ—Ç–∑—ã–≤—ã",
                    "  ‚Ä¢ /view\\_feedback read \\- –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã",
                    "  ‚Ä¢ /view\\_feedback unread \\- –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã",
                    "  ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã: /view\\_feedback all 2"
                ])
            )
        )
        
        await message.reply(help_text, parse_mode=types.ParseMode.MARKDOWN_V2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∞: {str(e)}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await safe_reply(message, "–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n/admin_users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n/admin_logs - –õ–æ–≥–∏\n/view_feedback - –û—Ç–∑—ã–≤—ã")

async def cmd_rules(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /rules - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞
    """
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /rules –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    rules_text = """
    üìã *–ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞*

    1Ô∏è‚É£ *–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:*
    ‚Ä¢ –ó–∞–¥–∞–≤–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —É—á–µ–±–Ω–æ–º—É –º–∞—Ç–µ—Ä–∏–∞–ª—É
    ‚Ä¢ –û–ø–∏—Å—ã–≤–∞–π—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç–µ
    ‚Ä¢ –ü—Ä–∏–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç (—É—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞—á–∏, –∫–æ–¥ –∏ —Ç.–¥.)
    
    2Ô∏è‚É£ *–ó–∞–ø—Ä–µ—â–µ–Ω–æ:*
    ‚Ä¢ ‚ùå –ü—Ä–æ—Å–∏—Ç—å –≥–æ—Ç–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á
    ‚Ä¢ ‚ùå –°–ø–∞–º–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–µ–∫–ª–∞–º—É
    ‚Ä¢ ‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—É
    ‚Ä¢ ‚ùå –û—Å–∫–æ—Ä–±–ª—è—Ç—å –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    3Ô∏è‚É£ *–°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π:*
    ‚Ä¢ –ü–µ—Ä–≤–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ: –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    ‚Ä¢ –í—Ç–æ—Ä–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ: –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    ‚Ä¢ –¢—Ä–µ—Ç—å–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ: –ë–∞–Ω –Ω–∞ 2 –º–∏–Ω—É—Ç—ã
    ‚Ä¢ –ß–µ—Ç–≤–µ—Ä—Ç–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ: –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –±–∞–Ω
    
    4Ô∏è‚É£ *–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:*
    ‚Ä¢ ‚úÖ "–û–±—ä—è—Å–Ω–∏, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø—É–∑—ã—Ä—å–∫–æ–º"
    ‚Ä¢ ‚úÖ "–ü–æ–º–æ–≥–∏ –ø–æ–Ω—è—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã —Ä–µ–∫—É—Ä—Å–∏–∏"
    ‚Ä¢ ‚úÖ "–í —á—ë–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Å–ø–∏—Å–∫–æ–º –∏ –∫–æ—Ä—Ç–µ–∂–µ–º –≤ Python?"
    
    5Ô∏è‚É£ *–ü—Ä–∏–º–µ—Ä—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:*
    ‚Ä¢ ‚ùå "–†–µ—à–∏ —ç—Ç—É –∑–∞–¥–∞—á—É –∑–∞ –º–µ–Ω—è"
    ‚Ä¢ ‚ùå "–ù–∞–ø–∏—à–∏ –≥–æ—Ç–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ"
    ‚Ä¢ ‚ùå "–°–¥–µ–ª–∞–π –º–æ—é –¥–æ–º–∞—à–∫—É"
    
    üí° *–ü–æ–º–Ω–∏—Ç–µ:* –ë–æ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º *–ø–æ–Ω—è—Ç—å* –º–∞—Ç–µ—Ä–∏–∞–ª, –∞ –Ω–µ —Å–¥–µ–ª–∞—Ç—å —Ä–∞–±–æ—Ç—É –∑–∞ –≤–∞—Å.
    """
    
    await message.reply(rules_text, parse_mode=types.ParseMode.MARKDOWN)

async def cmd_violations(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /violations - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /violations –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    try:
        # –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è
        logger.info(f"–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        db.clear_expired_violations(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π
        violations_count = db.get_user_violations_count(user_id)
        logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {violations_count}")
        
        if violations_count == 0:
            logger.info(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π")
            await safe_reply(message,
                "‚úÖ *–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π*\n\n"
                "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ–±–ª—é–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞!"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –Ω–∞—Ä—É—à–µ–Ω–∏–π
        violations = db.get_violations(user_id)
        if not violations:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –Ω–∞—Ä—É—à–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await safe_reply(message,
                "‚ùì *–°—Ç—Ä–∞–Ω–Ω–æ...*\n\n"
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = [f"üìä *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–∏—Ö –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö*\n\n"
                   f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π: {violations_count}\n"]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ä–æ–∫–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏–π
        c = db._get_connection().cursor()
        try:
            c.execute('SELECT violations_expire_at FROM users WHERE user_id = ?', (user_id,))
            result = c.fetchone()
            if result and result[0]:
                expire_at = datetime.fromisoformat(result[0])
                time_left = expire_at - datetime.now()
                if time_left.total_seconds() > 0:
                    hours = int(time_left.total_seconds() // 3600)
                    minutes = int((time_left.total_seconds() % 3600) // 60)
                    response.append(f"–ù–∞—Ä—É—à–µ–Ω–∏—è –±—É–¥—É—Ç —Å–±—Ä–æ—à–µ–Ω—ã —á–µ—Ä–µ–∑: {hours}—á {minutes}–º\n")
                    logger.info(f"–ù–∞—Ä—É—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –±—É–¥—É—Ç —Å–±—Ä–æ—à–µ–Ω—ã —á–µ—Ä–µ–∑ {hours}—á {minutes}–º")
        finally:
            c.close()
        
        response.append("\n*–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è:*\n")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –Ω–∞—Ä—É—à–µ–Ω–∏–π
        for i, (type_, reason, date, _) in enumerate(violations[:5], 1):
            violation_date = datetime.fromisoformat(date)
            response.append(
                f"{i}. *{violation_date.strftime('%d.%m.%Y %H:%M')}*\n"
                f"–¢–∏–ø: {type_}\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            )
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        await safe_reply(message, "".join(response))
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await safe_reply(message,
            "‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞*\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

async def cmd_feedback(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /feedback
    """
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /feedback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞
    await FeedbackStates.waiting_for_feedback.set()
    
    await message.reply(
        "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ–ø–∏—Å–∞—Ç—å, —á—Ç–æ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –∏–ª–∏ –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è, "
        "–∫–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–ª—É—á—à–∏—Ç—å.\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ /cancel",
        parse_mode=types.ParseMode.MARKDOWN
    )

async def cmd_cancel(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel
    """
    current_state = await state.get_state()
    if current_state is not None:
        await state.finish()
        await message.reply("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–º–µ–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ")
    else:
        await message.reply("ü§î –ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å")

async def process_feedback(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    feedback_text = message.text.strip()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤
    if db.add_feedback(user_id, feedback_text, username, first_name, last_name):
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω –æ—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await message.reply(
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á—Ç–µ–º –µ–≥–æ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ –±–æ—Ç–∞.",
            parse_mode=types.ParseMode.MARKDOWN
        )
    else:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=types.ParseMode.MARKDOWN
        )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()

async def cmd_view_feedback(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /view_feedback (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    /view_feedback - –ø–æ–∫–∞–∑–∞—Ç—å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
    /view_feedback all - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—Ç–∑—ã–≤—ã
    /view_feedback read - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
    /view_feedback unread - –ø–æ–∫–∞–∑–∞—Ç—å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
    –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã: /view_feedback all 2
    """
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        await message.reply("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    # –†–∞–∑–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    args = message.get_args().split()
    filter_type = args[0] if args else 'unread'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
    page = int(args[1]) if len(args) > 1 and args[1].isdigit() else 1
    
    if filter_type not in ['all', 'read', 'unread']:
        filter_type = 'unread'
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
    total_count = db.get_feedback_count(filter_type)
    
    if total_count == 0:
        status_text = {
            'all': '–æ—Ç–∑—ã–≤–æ–≤',
            'read': '–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤',
            'unread': '–Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤'
        }
        await message.reply(f"üìù –ù–µ—Ç {status_text[filter_type]}")
        return
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    items_per_page = 10
    total_pages = (total_count + items_per_page - 1) // items_per_page
    page = min(max(1, page), total_pages)  # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
    offset = (page - 1) * items_per_page
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã
    feedback_list = db.get_feedback(filter_type, items_per_page, offset)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
    header_text = {
        'all': '–í—Å–µ –æ—Ç–∑—ã–≤—ã',
        'read': '–ü—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã',
        'unread': '–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã'
    }
    feedback_text = f"üìã *{header_text[filter_type]}*\n"
    feedback_text += f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}\n\n"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤
    for feedback_id, user_id, text, created_at, username, first_name, last_name, is_read in feedback_list:
        feedback_text += f"*ID:* {feedback_id}\n"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = []
        if username:
            user_info.append(f"@{username}")
        if first_name:
            user_info.append(first_name)
        if last_name:
            user_info.append(last_name)
        
        user_display = " ".join(user_info) if user_info else str(user_id)
        feedback_text += f"*–û—Ç:* {user_display} (ID: {user_id})\n"
        feedback_text += f"*–î–∞—Ç–∞:* {created_at}\n"
        feedback_text += f"*–°—Ç–∞—Ç—É—Å:* {'–ü—Ä–æ—á–∏—Ç–∞–Ω–æ' if is_read else '–ù–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ'}\n"
        feedback_text += f"*–¢–µ–∫—Å—Ç:* {text}\n"
        feedback_text += "-" * 30 + "\n"
        
        # –û—Ç–º–µ—á–∞–µ–º –æ—Ç–∑—ã–≤ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π, –µ—Å–ª–∏ –æ–Ω –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π
        if not is_read:
            db.mark_feedback_as_read(feedback_id)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    feedback_text += "\nüí° *–ù–∞–≤–∏–≥–∞—Ü–∏—è:*\n"
    feedback_text += f"‚Ä¢ –¢–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä: {filter_type}\n"
    feedback_text += f"‚Ä¢ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}\n"
    feedback_text += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /view_feedback [all|read|unread] [—Å—Ç—Ä–∞–Ω–∏—Ü–∞]\n"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Å—Ç—è–º–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    if len(feedback_text) > 4000:
        parts = [feedback_text[i:i+4000] for i in range(0, len(feedback_text), 4000)]
        for part in parts:
            await message.reply(part, parse_mode=types.ParseMode.MARKDOWN)
    else:
        await message.reply(feedback_text, parse_mode=types.ParseMode.MARKDOWN)

async def cmd_clear_cache(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear_cache (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    """
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        await safe_reply(message, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏
    cache.clear_expired()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
    stats = cache.get_stats()
    
    await safe_reply(message,
        f"üóë *–ö—ç—à –æ—á–∏—â–µ–Ω*\n\n"
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
        f"‚Ä¢ –ó–∞–ø–∏—Å–µ–π –≤ –∫—ç—à–µ: {stats['total_entries']}\n"
        f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {stats['max_size']}\n"
        f"‚Ä¢ –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∑–∞–ø–∏—Å–∏: {stats['ttl']} —Å–µ–∫\n"
        f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {stats['memory_usage']} –±–∞–π—Ç",
        parse_mode=types.ParseMode.MARKDOWN
    )

async def cmd_examples(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /examples - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    """
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /examples –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    examples_text = (
        "üìù *–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤*\n\n"
        "*HTML:*\n"
        f"{hint_system.get_example('html')}\n\n"
        "*CSS:*\n"
        f"{hint_system.get_example('css')}\n\n"
        "*–í—ë—Ä—Å—Ç–∫–∞ –∏ –º–∞–∫–µ—Ç—ã:*\n"
        f"{hint_system.get_example('layout')}\n\n"
        "üí° –ü–æ–º–Ω–∏—Ç–µ: —á–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ –≤–æ–ø—Ä–æ—Å, —Ç–µ–º –ø–æ–ª–µ–∑–Ω–µ–µ –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç!\n\n"
        "üîç –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:\n"
        "‚Ä¢ –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–π—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –∫–æ–¥\n"
        "‚Ä¢ –û–ø–∏—Å—ã–≤–∞–π—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n"
        "‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ, —á—Ç–æ –≤—ã —É–∂–µ –ø—Ä–æ–±–æ–≤–∞–ª–∏\n"
        "‚Ä¢ –°–æ–æ–±—â–∞–π—Ç–µ –æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö –∫ –±—Ä–∞—É–∑–µ—Ä–∞–º\n"
        "‚Ä¢ –£–ø–æ–º–∏–Ω–∞–π—Ç–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏"
    )
    
    await safe_reply(message, examples_text, parse_mode=types.ParseMode.MARKDOWN_V2)

async def cmd_restart(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /restart - —Å–±—Ä–æ—Å –¥–∏–∞–ª–æ–≥–∞ —Å –±–æ—Ç–æ–º
    """
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /restart –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cache.clear_user_history(user_id)
    
    await message.reply(
        "üîÑ –î–∏–∞–ª–æ–≥ —Å–±—Ä–æ—à–µ–Ω.\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –±–µ—Å–µ–¥—É.\n\n"
        "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
        parse_mode=types.ParseMode.MARKDOWN
    )

async def handle_error(update: types.Update, exception: Exception) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    try:
        if isinstance(exception, ApiError):
            message = format_error(str(exception), "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        elif isinstance(exception, ValidationError):
            message = format_error(str(exception), "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à –∑–∞–ø—Ä–æ—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")
        elif isinstance(exception, RateLimitError):
            message = format_error(
                f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {exception.wait_time} —Å–µ–∫—É–Ω–¥",
                "–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º"
            )
        else:
            message = format_error(str(exception), "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–∑–∂–µ")
        
        await update.message.reply(message, parse_mode=types.ParseMode.MARKDOWN_V2)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫: {str(e)}")
        await update.message.reply(
            format_error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."),
            parse_mode=types.ParseMode.MARKDOWN_V2
        )

def register_handlers(dp: Dispatcher):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    """
    logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥...")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    dp.register_message_handler(cmd_start, commands=['start'])
    dp.register_message_handler(cmd_help, commands=['help'])
    dp.register_message_handler(cmd_reset, commands=['reset'])
    dp.register_message_handler(cmd_rules, commands=['rules'])
    dp.register_message_handler(cmd_violations, commands=['violations'])
    dp.register_message_handler(cmd_examples, commands=['examples'])
    dp.register_message_handler(cmd_restart, commands=['restart'])  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    
    # –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã
    dp.register_message_handler(cmd_admin_users, commands=['admin_users', 'adminusers'])
    dp.register_message_handler(cmd_admin_logs, commands=['admin_logs', 'adminlogs'])
    dp.register_message_handler(cmd_admin_help, commands=['admin_help', 'adminhelp'])
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ API-–∫–ª—é—á–∞
    dp.register_message_handler(
        process_api_key,
        lambda message: message.text.startswith('sk-')
    )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–æ–≤
    dp.register_message_handler(cmd_feedback, commands=['feedback'], state=None)
    dp.register_message_handler(cmd_cancel, commands=['cancel'], state='*')
    dp.register_message_handler(process_feedback, state=FeedbackStates.waiting_for_feedback)
    dp.register_message_handler(cmd_view_feedback, commands=['view_feedback', 'viewfeedback'])
    
    # –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
    dp.register_message_handler(cmd_clear_cache, commands=['clear_cache'])
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–π)
    dp.register_message_handler(process_message)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    dp.register_message_handler(handle_error)
    
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã") 