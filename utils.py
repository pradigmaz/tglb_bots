from typing import Optional, List, Union
from aiogram import types
from logger import logger
import re
from cryptography.fernet import Fernet
import os
from dotenv import load_dotenv
from formatting import format_error, safe_format_message

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def is_valid_api_key(api_key: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ API-–∫–ª—é—á–∞
    """
    # OpenRouter API-–∫–ª—é—á–∏ –æ–±—ã—á–Ω–æ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 'sk-' –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –¥–µ—Ñ–∏—Å—ã
    return bool(api_key and api_key.startswith('sk-'))

def format_error_message(error: Exception) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ë–∞–∑–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
    error_messages = {
        'InvalidAPIKey': '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π API-–∫–ª—é—á\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
        'RateLimitError': '‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.',
        'ConnectionError': 'üîå –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        'TimeoutError': '‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
    }
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–ª–∞—Å—Å–∞ –æ—à–∏–±–∫–∏
    error_type = error.__class__.__name__
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    return error_messages.get(
        error_type,
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
    )

def format_moderation_message(reason: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    base_message = "‚ö†Ô∏è –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ"
    if reason:
        return f"{base_message}\n\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
    return f"{base_message}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à –∑–∞–ø—Ä–æ—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞–º."

async def safe_reply(message: types.Message, text: str, parse_mode: Optional[str] = None) -> bool:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    
    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—á–∞–µ–º
        text (str): –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        parse_mode (Optional[str]): –†–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
    Returns:
        bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
    """
    try:
        formatted_text = safe_format_message(text) if parse_mode else text
        await message.reply(formatted_text, parse_mode=parse_mode)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        try:
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await message.reply(text)
            return True
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False

def split_long_message(text: str, max_length: int = 3500) -> List[str]:
    """
    –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    if len(text) <= max_length:
        return [text]
        
    parts = []
    current_part = ""
    code_block = False
    
    for line in text.split('\n'):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª–æ/–∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –∫–æ–¥–∞
        if line.strip().startswith('```'):
            code_block = not code_block
            
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —á–∞—Å—Ç—å —Å—Ç–∞–Ω–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–π
        if len(current_part) + len(line) + 2 > max_length and not code_block:
            parts.append(current_part)
            current_part = line
        else:
            current_part += '\n' + line if current_part else line
            
    if current_part:
        parts.append(current_part)
        
    return parts

def encrypt_api_key(api_key: str) -> Optional[str]:
    """
    –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ API-–∫–ª—é—á–∞
    
    Args:
        api_key (str): API-–∫–ª—é—á –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        
    Returns:
        Optional[str]: –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        encryption_key = os.getenv('ENCRYPTION_KEY')
        if not encryption_key:
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return None
            
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Fernet —Å –∫–ª—é—á–æ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        f = Fernet(encryption_key.encode())
        
        # –®–∏—Ñ—Ä—É–µ–º API-–∫–ª—é—á
        encrypted_key = f.encrypt(api_key.encode())
        return encrypted_key.decode()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏ API-–∫–ª—é—á–∞: {e}")
        return None

def decrypt_api_key(encrypted_key: str) -> Optional[str]:
    """
    –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ API-–∫–ª—é—á–∞
    
    Args:
        encrypted_key (str): –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π API-–∫–ª—é—á
        
    Returns:
        Optional[str]: –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        encryption_key = os.getenv('ENCRYPTION_KEY')
        if not encryption_key:
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return None
            
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Fernet —Å –∫–ª—é—á–æ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        f = Fernet(encryption_key.encode())
        
        # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º API-–∫–ª—é—á
        decrypted_key = f.decrypt(encrypted_key.encode())
        return decrypted_key.decode()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ API-–∫–ª—é—á–∞: {e}")
        return None 

def is_admin(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    
    Args:
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, False –∏–Ω–∞—á–µ
    """
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    admin_ids_str = os.getenv('ADMIN_IDS', '')
    if not admin_ids_str:
        logger.warning("–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç")
        return False
        
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É —Å ID –≤ —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª
        admin_ids = [int(id_str) for id_str in admin_ids_str.split(',')]
        return user_id in admin_ids
    except ValueError:
        logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return False
