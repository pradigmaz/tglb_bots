from aiogram.utils.markdown import text, bold, italic, code, pre
from aiogram.utils.exceptions import CantParseEntities
from typing import Optional, Union, List
from logger import logger

def escape_markdown(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Markdown V2
    """
    chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for char in chars:
        text = text.replace(char, f"\\{char}")
    return text

def format_message(message: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É—è —É—Ç–∏–ª–∏—Ç—ã aiogram
    
    Args:
        message (str): –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    if not message:
        return message
    
    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, —Å–æ—Ö—Ä–∞–Ω—è—è –±–ª–æ–∫–∏ –∫–æ–¥–∞
        parts = []
        current_text = ""
        in_code_block = False
        code_block_content = ""
        code_language = "python"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é Python
        
        for line in message.split('\n'):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª–æ –±–ª–æ–∫–∞ –∫–æ–¥–∞
            if line.strip().startswith('```'):
                if not in_code_block:
                    # –ù–∞—á–∞–ª–æ –±–ª–æ–∫–∞ –∫–æ–¥–∞
                    if current_text:
                        parts.append(('text', current_text))
                        current_text = ""
                    in_code_block = True
                    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
                    lang_spec = line.strip()[3:].strip()
                    if lang_spec:
                        code_language = lang_spec
                    continue
                else:
                    # –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –∫–æ–¥–∞
                    in_code_block = False
                    if code_block_content:
                        parts.append(('code', code_block_content.strip(), code_language))
                    code_block_content = ""
                    code_language = "python"
                    continue
            
            if in_code_block:
                code_block_content += line + '\n'
            else:
                current_text += line + '\n'
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç
        if current_text:
            parts.append(('text', current_text))
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å
        formatted_parts = []
        for part_type, *content in parts:
            if part_type == 'text':
                text_content = content[0]
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                text_content = escape_markdown(text_content)
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
                lines = text_content.split('\n')
                formatted_lines = []
                for line in lines:
                    if line.strip().startswith('‚Ä¢') or line.strip().startswith('*'):
                        # –≠—Ç–æ —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞
                        formatted_lines.append(line.replace('*', '‚Ä¢', 1))
                    else:
                        formatted_lines.append(line)
                formatted_parts.append('\n'.join(formatted_lines))
            elif part_type == 'code':
                code_content, language = content
                formatted_parts.append(pre(code_content, language=language))
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏
        return text(*formatted_parts)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        return message

def format_code(code: str, language: str = "python") -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–ª–æ–∫ –∫–æ–¥–∞ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
    
    Args:
        code (str): –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥
        language (str): –Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–ª–æ–∫ –∫–æ–¥–∞
    """
    if not code:
        return code
        
    try:
        # –û—á–∏—â–∞–µ–º –∫–æ–¥ –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
        code = code.strip()
        return pre(code, language=language)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–¥–∞: {str(e)}")
        return code

def format_error(error_text: str, recommendation: Optional[str] = None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    
    Args:
        error_text (str): –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
        recommendation (str, optional): –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    """
    try:
        parts = [
            bold("‚ùå –û—à–∏–±–∫–∞"),
            "",
            error_text
        ]
        
        if recommendation:
            parts.extend([
                "",
                italic("üí° " + recommendation)
            ])
            
        return text(*parts)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {str(e)}")
        return f"‚ùå –û—à–∏–±–∫–∞: {error_text}"

def format_section(title: str, *content: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–µ–∫—Ü–∏—é —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
    
    Args:
        title (str): –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
        *content (str): –°—Ç—Ä–æ–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–µ–∫—Ü–∏—è
    """
    try:
        return text(
            bold(title),
            "",
            *content
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–µ–∫—Ü–∏–∏: {str(e)}")
        return f"{title}\n\n{text(*content)}"

def format_list(items: List[str], marker: str = "‚Ä¢") -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    
    Args:
        items (List[str]): –≠–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞
        marker (str): –ú–∞—Ä–∫–µ—Ä —Å–ø–∏—Å–∫–∞
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    """
    try:
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∫–∞–∂–¥–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ —Å–ø–∏—Å–∫–∞
        formatted_items = [f"{marker} {escape_markdown(item)}" for item in items]
        return text(*formatted_items)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {str(e)}")
        return "\n".join(f"{marker} {item}" for item in items)

def safe_format_message(message: Union[str, Exception]) -> str:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    
    Args:
        message (Union[str, Exception]): –°–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    try:
        if isinstance(message, Exception):
            return format_error(str(message))
        return format_message(str(message))
    except CantParseEntities:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        return str(message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
        return str(message) 